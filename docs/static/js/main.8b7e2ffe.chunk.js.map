{"version":3,"sources":["store/light/light.js","store/index.js","components/light/Loading.js","router/Router.js","reportWebVitals.js","index.js"],"names":["defaultState","fromJS","isLoading","reducer","state","action","type","setIn","key","value","reducers","combineReducers","light","store","createStore","applyMiddleware","thunk","subscribe","getState","toJS","console","log","connect","getIn","dispatch","onSetState","onDispatch","props","isLazyLoading","className","Login","lazy","Index","Router","fallback","from","to","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8HAEMA,EAAeC,iBAAO,CAC1BC,WAAW,IAYEC,EATC,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCAChD,OAAQA,EAAOC,MACb,IAAK,kBACH,OAAOF,EAAMG,MAAMF,EAAOG,IAAKP,iBAAOI,EAAOI,QAC/C,QACE,OAAOL,ICNPM,EAAWC,0BAAgB,CAC/BC,UAGIC,EAAQC,YAAYJ,EAAUK,YAAgBC,MAEpDH,EAAMI,WAAU,WACd,IAAIb,EAAQS,EAAMK,WAAWC,OAC7BC,QAAQC,IAAIjB,MAGCS,O,uICJf,IAkBeS,eAlBS,SAAClB,GAEvB,OADAgB,QAAQC,IAAIjB,EAAMe,QACX,CACLjB,UAAWE,EAAMmB,MAAM,CAAC,QAAS,kBAIV,SAACC,GAC1B,MAAO,CACLC,WADK,SACMjB,EAAKC,GACde,EAAS,CAAElB,KAAM,kBAAmBE,MAAKC,WAE3CiB,WAJK,SAIMrB,GACTmB,EAASnB,OAKAiB,EA3Bf,SAAiBK,GACf,IAAQzB,EAA6ByB,EAA7BzB,UAAW0B,EAAkBD,EAAlBC,cACnB,OACE,qBAAKC,UAAW,cAAgB3B,GAAa0B,EAAgB,SAAW,SCHtEE,EAAQC,gBAAK,kBAAM,uDACnBC,EAAQD,gBAAK,kBAAM,iCAEV,SAASE,IACtB,OACE,qCACE,cAAC,WAAD,CAAUC,SAAU,cAAC,EAAD,CAASN,eAAe,IAA5C,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAUO,KAAK,IAAIC,GAAG,eAAeC,OAAK,IAC1C,cAAC,IAAD,CAAOC,KAAK,eAAeC,UAAWT,IACtC,cAAC,IAAD,CAAOQ,KAAK,eAAeC,UAAWP,SAG1C,cAAC,EAAD,O,UCJSQ,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCEdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUtC,MAAOA,IAAjB,SACE,cAAC,IAAD,UACE,cAACoB,EAAD,UAINmB,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8b7e2ffe.chunk.js","sourcesContent":["import { fromJS } from 'immutable'\r\n\r\nconst defaultState = fromJS({\r\n  isLoading: false\r\n})\r\n\r\nconst reducer = (state = defaultState, action) => {\r\n  switch (action.type) {\r\n    case 'SET_LIGHT_STATE':\r\n      return state.setIn(action.key, fromJS(action.value))\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nexport default reducer","import { createStore, applyMiddleware } from 'redux'\r\nimport thunk from 'redux-thunk'\r\nimport { combineReducers } from 'redux-immutable'\r\nimport light from './light/light'\r\n\r\nconst reducers = combineReducers({\r\n  light\r\n})\r\n\r\nconst store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nstore.subscribe(() => {\r\n  let state = store.getState().toJS()\r\n  console.log(state)\r\n})\r\n\r\nexport default store","import React from 'react'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction Loading(props) {\r\n  const { isLoading, isLazyLoading } = props\r\n  return (\r\n    <div className={\"m-loading \" + (isLoading || isLazyLoading ? 'active' : '')}>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  console.log(state.toJS())\r\n  return {\r\n    isLoading: state.getIn(['light', 'isLoading'])\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onSetState(key, value) {\r\n      dispatch({ type: 'SET_LIGHT_STATE', key, value })\r\n    },\r\n    onDispatch(action) {\r\n      dispatch(action)\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Loading)\r\n","import React, { Suspense, lazy } from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport Loading from '../components/light/Loading'\r\nconst Login = lazy(() => import('../views/light/login/Login'))\r\nconst Index = lazy(() => import('../views/light/index/Index'))\r\n\r\nexport default function Router() {\r\n  return (\r\n    <>\r\n      <Suspense fallback={<Loading isLazyLoading={true}></Loading>}>\r\n        <Switch>\r\n          <Redirect from=\"/\" to=\"/light/login\" exact></Redirect>\r\n          <Route path=\"/light/login\" component={Login}></Route>\r\n          <Route path=\"/light/index\" component={Index}></Route>\r\n        </Switch>\r\n      </Suspense>\r\n      <Loading></Loading>\r\n    </>\r\n  )\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\nimport store from './store'\nimport Router from './router/Router'\nimport \"./static/css/light.css\"\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <Router></Router>\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}